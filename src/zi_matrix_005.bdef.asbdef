managed with additional save implementation in class zbp_i_matrix_005 unique;
strict ( 2 );
with draft;
define behavior for ZI_MATRIX_005 alias Matrix
implementation in class zbp_i_matrix_005 unique
persistent table zmatrix_005
draft table zmatrix_005d
lock master
total etag LastChangedAt
authorization master ( instance )
etag master LocalLastChangedAt
{
  create;
  update;
  delete;

  // Actions:
  action check_atp;
  action update_items;
  action copy_color;
  action create_sales_order;
  action get_sales_order;
  action update_sales_order;

  // Events:
  determination on_create on modify { field MatrixUUID; }
  determination on_model_modify on modify { field Model; }
  determination on_scheme_save on save { field Model, Color, MatrixTypeID, Country; }
  determination on_sales_order_create on modify { field SalesOrderID, SalesOrderURL; } // to enable refreshing the fields

  association _Sizehead { create ( features : instance, authorization : update ); with draft; }
  association _Size { create ( features : instance, authorization : update ); with draft; }
  association _Item { create ( features : instance, authorization : update ); with draft; }

  field ( numbering : managed, readonly ) MatrixUUID;
  field ( readonly ) MatrixID;
  field ( readonly ) SalesOrderID;
  field ( readonly ) MatrixTypeID;
  field ( readonly ) ModelRef;
  field ( readonly ) ColorRef;
  field ( readonly ) CountryRef;
  field ( readonly ) MatrixTypeRef;

  draft determine action Prepare;
  draft action Resume with additional implementation;
  draft action Edit with additional implementation;
  draft action Activate with additional implementation optimized;
  draft action Discard /*with additional implementation*/;

//  draft determine action Prepare {
//    determination on_prepare;
//  }

  mapping for ZMATRIX_005
  {
    MatrixUUID              = matrixuuid;
    MatrixID                = matrixid;
    OrganizationDivision    = organizationdivision;
    SalesOrderID            = salesorderid;
    SalesOrderType          = salesordertype;
    SalesOrganization       = salesorganization;
    SoldToParty             = soldtoparty;
    DistributionChannel     = distributionchannel;
    Model                   = model;
    Color                   = color;
    MatrixTypeID            = matrixtypeid;
    Country                 = country;
    PurchaseOrderByCustomer = purchaseorderbycustomer;
    Copying                 = copying; // Copy Color
    SalesOrderURL           = salesorderurl;
    CustomerURL             = customerurl;
    ModelRef                = modelref;
    ModelRefURL             = modelrefurl;
    ColorRef                = colorref;
    ColorRefURL             = colorrefurl;
    CountryRef              = countryref;
    CountryRefURL           = countryrefurl;
    MatrixTypeRef           = matrixtyperef;
    MatrixTypeRefURL        = matrixtyperefurl;
    Hidden00                = hidden00;
    Hidden01                = hidden01;
    Hidden02                = hidden02;
    Hidden03                = hidden03;
    Hidden04                = hidden04;
    Hidden05                = hidden05;
    Hidden06                = hidden06;
    Hidden07                = hidden07;
    Hidden08                = hidden08;
    Hidden09                = hidden09;
    Hidden10                = hidden10;
    Hidden11                = hidden11;
    Hidden12                = hidden12;
    Hidden13                = hidden13;
    Hidden14                = hidden14;
    Hidden15                = hidden15;
    Hidden16                = hidden16;
    Hidden17                = hidden17;
    Hidden18                = hidden18;
    Hidden19                = hidden19;
    Hidden20                = hidden20;
    Hidden21                = hidden21;
    Hidden22                = hidden22;
    Criticality01           = criticality01;
    CreationDate            = creationdate;
    CreationTime            = creationtime;
    CreatedBy               = createdby;
    CreatedAt               = createdat;
    LastChangedAt           = lastchangedat;
    LastChangedBy           = lastchangedby;
    LocalLastChangedAt      = locallastchangedat;
  }
  side effects
  {
    field Model affects field MatrixTypeID, entity _Size;
    field Color affects entity _Size;
    field MatrixTypeID affects entity _Size;
    field Country affects entity _Size;
    action check_atp affects entity _Item;
    action update_items affects entity _Item;
    action copy_color affects entity _Item;
    action create_sales_order affects field SalesOrderID, field SalesOrderURL;
    action get_sales_order affects field SalesOrderID, field SalesOrderURL, entity _Item, entity _Size;
    determine action Prepare executed on $self affects $self;
  }

}

define behavior for ZI_SIZEHEAD_005 alias Sizehead
implementation in class zbp_i_sizehead_005 unique
persistent table zsizehead_005
draft table zsizehead_005d
lock dependent by _Matrix
authorization dependent by _Matrix
etag master LocalLastChangedAt
{
  update;
  delete;

  field ( readonly ) MatrixUUID;
  field ( readonly ) SizeID;
  field ( readonly ) Back;
  field ( readonly ) BackSizeID;
  field ( readonly ) LocalLastChangedAt;

  association _Matrix { with draft; }
}

define behavior for ZI_SIZE_005 alias Size
implementation in class zbp_i_size_005 unique
persistent table zsize_005
draft table zsize_005d
lock dependent by _Matrix
authorization dependent by _Matrix
etag master LocalLastChangedAt
{
  update;
  delete;

  determination on_size_modify on modify { field a; }

  field ( readonly ) MatrixUUID;
  field ( readonly ) SizeID;
  field ( readonly ) Back;
  field ( readonly ) BackSizeID;
  field ( readonly ) LocalLastChangedAt;

  association _Matrix { with draft; }

}

define behavior for ZI_ITEM_005 alias Item
implementation in class zbp_i_item_005 unique
persistent table zitem_005
draft table zitem_005d
lock dependent by _Matrix
authorization dependent by _Matrix
etag master LocalLastChangedAt
{
  update;
  delete;

  field ( readonly ) MatrixUUID;
  field ( readonly : update ) ItemID;
  field ( readonly : update ) ItemID2;
  field ( readonly : update ) Product;
  field ( readonly : update ) Quantity;
  field ( readonly : update ) Stock;
  field ( readonly : update ) AvailableStock;
  field ( readonly : update ) Availability;
  field ( readonly : update ) LocalLastChangedAt;

  association _Matrix { with draft; }
}